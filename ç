function localStorageAvailable () {
  const available = typeof localStorage !== 'undefined'
  if (!available) throw new Error('LocalStorage not available')
}

function parsedValue (value) {
  if (typeof value === 'string') {
    try {
      const json = JSON.parse(value)
      return json
    } catch {
      return value
    }
  } else {
    return value
  }
}

// [Function: handle] manages localStorage of any value
// returned by the passed function argument
// @block = function
// @options = { force: boolean, identifier: string, persistent: boolean }
function handle (block, options = {}) {
  try {
    localStorageAvailable()
    const defaultIdentifier  = block.name
    const selectedIdentifier = options.identifier || defaultIdentifier
    if (!selectedIdentifier) throw new Error('Non identifier passed')

    const storedData = localStorage.getItem(selectedIdentifier)
    const parsedStoredData = parsedValue(storedData)
    if (storedData && !options.force) return parsedStoredData.value

    // BLoque pap√°
    let blockResult = undefined
    if (typeof block !== 'function') {
      // Bloque hijo
      blockResult = block
    } else {
      // Bloque hijo
      blockResult = block()
    }
    const clearOptions = {...options, identifier: selectedIdentifier }
    const itemToSave = JSON.stringify({ value: blockResult, options: clearOptions })
    localStorage.setItem(selectedIdentifier, itemToSave)
    return blockResult
  } catch (e) {
    console.error(e)
    return undefined
  }
}

module.exports = { handle }

